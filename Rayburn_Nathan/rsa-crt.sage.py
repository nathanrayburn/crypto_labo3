

# This file was *autogenerated* from the file rsa-crt.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_1024 = Integer(1024); _sage_const_65537 = Integer(65537)
from hashlib import sha256

def key_gen():
    phi = _sage_const_2 
    e = _sage_const_2 
    while gcd(phi, e) != _sage_const_1  : 
        p = random_prime(_sage_const_2 **_sage_const_1024 , proof = False)
        q = random_prime(_sage_const_2 **_sage_const_1024 , proof = False)
        n = p*q
        phi = (p-_sage_const_1 ) * (q-_sage_const_1 )
        e = _sage_const_65537 
    d = inverse_mod(e, phi)
    return (e, d, n, p, q)

def sign(m, d, p, q, n):
    dp = d % (p-_sage_const_1 )
    dq = d % (q-_sage_const_1 )
    h = int.from_bytes(sha256(m).digest(), byteorder = "big")
    #Nous introduisons ici le bug
    sp = ZZ.random_element(p)# Nous simulons ici le bug. Vrai code: power_0mod(h, dp, p)
    print("SP = %s" % str(sp))
    sq = power_mod(h, dq, q)
    return crt([sp, sq], [p, q])

def generate():
    (e, d, n, p, q) = key_gen()
    m = b"This message is signed with RSA-CRT!"
    s = sign(m, d, p, q, n)
    print("e = %s" % str(e))
    print("n = %s" %str(n))
    print("s = %s" %s)
    
generate()

